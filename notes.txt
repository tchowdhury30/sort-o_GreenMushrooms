Green Mushrooms | Emily Ortiz, Tasnim Chowdhury, Kartik Vanjani
APCS pd8
Lab04 Never Fear, Big O is Here!

DISCO
- Nested for loops increases time complexity expontentially
- A for loop only matters in time complexity if the resource intensive operations in it run
- The n in O(n) can be roughly the same as the number of passes 

QCC

## BUB-QA
 * q0: If a pass requires no swaps, what do you know?
 * a0: The ArrayList is already in order
 * q1: After pass p, what do you know?
 * a1: We know that all elements from index p-1 and less are in order
 * q2: How many passes are necessary to completely sort?
 * a2: The worse case scenario would require length passes to completely sort

## SEL-QA
 * q0: How many passes to sort n elements?
 * a0: n-1 passes
 * q1: What do you know after pass p?
 * a1: After pass p, all values are set in their final positions at all indexes less than and equal to p-1.
 * q2: How do you know if sorted?
 * a2: If the pass number is equal to or less than  the index+1.
 * q3: What does a pass boil down to?
 * a3: When 1 swap happens between the smallest value and the value at the position its looking at.
  - Selectionsort is right to left while bubble sort was from left to right.
   - We have to use pass-- in our loops since the loop goes from right to left
     as oppose to left to right which is why we do not use pass++. 
 ALGO
 Select smallest element, move to end, then select next smallest, move to next-to-end.
 
## INS-QA
 * q0: How many passes to sort n elements?
 * a0: n - 1 passes
 * q1: What do you know after pass p?
 * a1: elements from 0 to index p are sorted
 * q2: How will you know when sorted?
 * a2: When passes = n - 1 or when the partition is at the end
 * q3: What constitues a pass?
 * a3: We can only move on from a pass when all the elements on the sorted side are in order and the partition changes
 * q4: What must you track?
 * a4: Where the partition is
 
 ALGO:
  1. Partition list into sorted and unsorted
  2. "Walk" element fron unsorted to where it belongs in cocoSorted
  3. Increase size of sorted by 1
  4. Repeat 2 and 3 until sorted
